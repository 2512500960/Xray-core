// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.1
// source: app/router/command/command.proto

package command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoutingService_SubscribeRoutingStats_FullMethodName = "/xray.app.router.command.RoutingService/SubscribeRoutingStats"
	RoutingService_TestRoute_FullMethodName             = "/xray.app.router.command.RoutingService/TestRoute"
	RoutingService_AddRule_FullMethodName               = "/xray.app.router.command.RoutingService/AddRule"
	RoutingService_AlterRule_FullMethodName             = "/xray.app.router.command.RoutingService/AlterRule"
	RoutingService_RemoveRule_FullMethodName            = "/xray.app.router.command.RoutingService/RemoveRule"
	RoutingService_SetRules_FullMethodName              = "/xray.app.router.command.RoutingService/SetRules"
	RoutingService_GetRules_FullMethodName              = "/xray.app.router.command.RoutingService/GetRules"
	RoutingService_GetRule_FullMethodName               = "/xray.app.router.command.RoutingService/GetRule"
	RoutingService_AddBalancer_FullMethodName           = "/xray.app.router.command.RoutingService/AddBalancer"
	RoutingService_AlterBalancer_FullMethodName         = "/xray.app.router.command.RoutingService/AlterBalancer"
	RoutingService_RemoveBalancer_FullMethodName        = "/xray.app.router.command.RoutingService/RemoveBalancer"
	RoutingService_GetBalancers_FullMethodName          = "/xray.app.router.command.RoutingService/GetBalancers"
)

// RoutingServiceClient is the client API for RoutingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingServiceClient interface {
	SubscribeRoutingStats(ctx context.Context, in *SubscribeRoutingStatsRequest, opts ...grpc.CallOption) (RoutingService_SubscribeRoutingStatsClient, error)
	TestRoute(ctx context.Context, in *TestRouteRequest, opts ...grpc.CallOption) (*RoutingContext, error)
	// AddRule When adding a routing rule, make sure that the new rule does not conflict with the API route, otherwise the API will not work properly
	AddRule(ctx context.Context, in *AddRoutingRuleRequest, opts ...grpc.CallOption) (*AddRoutingRuleResponse, error)
	AlterRule(ctx context.Context, in *AlterRoutingRuleRequest, opts ...grpc.CallOption) (*AlterRoutingRuleResponse, error)
	RemoveRule(ctx context.Context, in *RemoveRoutingRuleRequest, opts ...grpc.CallOption) (*RemoveRoutingRuleResponse, error)
	// SetRules Routing rules must be set to ensure that the API route must exist, otherwise the API will not work properly
	SetRules(ctx context.Context, in *SetRoutingRulesRequest, opts ...grpc.CallOption) (*SetRoutingRulesResponse, error)
	GetRules(ctx context.Context, in *GetRoutingRulesRequest, opts ...grpc.CallOption) (*GetRoutingRulesResponse, error)
	GetRule(ctx context.Context, in *GetRoutingRuleRequest, opts ...grpc.CallOption) (*GetRoutingRuleResponse, error)
	AddBalancer(ctx context.Context, in *AddBalancingRuleRequest, opts ...grpc.CallOption) (*AddBalancingRuleResponse, error)
	AlterBalancer(ctx context.Context, in *AlterBalancingRuleRequest, opts ...grpc.CallOption) (*AlterBalancingRuleResponse, error)
	RemoveBalancer(ctx context.Context, in *RemoveBalancingRuleRequest, opts ...grpc.CallOption) (*RemoveBalancingRuleResponse, error)
	GetBalancers(ctx context.Context, in *GetBalancerRequest, opts ...grpc.CallOption) (*GetBalancerResponse, error)
}

type routingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingServiceClient(cc grpc.ClientConnInterface) RoutingServiceClient {
	return &routingServiceClient{cc}
}

func (c *routingServiceClient) SubscribeRoutingStats(ctx context.Context, in *SubscribeRoutingStatsRequest, opts ...grpc.CallOption) (RoutingService_SubscribeRoutingStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoutingService_ServiceDesc.Streams[0], RoutingService_SubscribeRoutingStats_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &routingServiceSubscribeRoutingStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoutingService_SubscribeRoutingStatsClient interface {
	Recv() (*RoutingContext, error)
	grpc.ClientStream
}

type routingServiceSubscribeRoutingStatsClient struct {
	grpc.ClientStream
}

func (x *routingServiceSubscribeRoutingStatsClient) Recv() (*RoutingContext, error) {
	m := new(RoutingContext)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingServiceClient) TestRoute(ctx context.Context, in *TestRouteRequest, opts ...grpc.CallOption) (*RoutingContext, error) {
	out := new(RoutingContext)
	err := c.cc.Invoke(ctx, RoutingService_TestRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) AddRule(ctx context.Context, in *AddRoutingRuleRequest, opts ...grpc.CallOption) (*AddRoutingRuleResponse, error) {
	out := new(AddRoutingRuleResponse)
	err := c.cc.Invoke(ctx, RoutingService_AddRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) AlterRule(ctx context.Context, in *AlterRoutingRuleRequest, opts ...grpc.CallOption) (*AlterRoutingRuleResponse, error) {
	out := new(AlterRoutingRuleResponse)
	err := c.cc.Invoke(ctx, RoutingService_AlterRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) RemoveRule(ctx context.Context, in *RemoveRoutingRuleRequest, opts ...grpc.CallOption) (*RemoveRoutingRuleResponse, error) {
	out := new(RemoveRoutingRuleResponse)
	err := c.cc.Invoke(ctx, RoutingService_RemoveRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) SetRules(ctx context.Context, in *SetRoutingRulesRequest, opts ...grpc.CallOption) (*SetRoutingRulesResponse, error) {
	out := new(SetRoutingRulesResponse)
	err := c.cc.Invoke(ctx, RoutingService_SetRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) GetRules(ctx context.Context, in *GetRoutingRulesRequest, opts ...grpc.CallOption) (*GetRoutingRulesResponse, error) {
	out := new(GetRoutingRulesResponse)
	err := c.cc.Invoke(ctx, RoutingService_GetRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) GetRule(ctx context.Context, in *GetRoutingRuleRequest, opts ...grpc.CallOption) (*GetRoutingRuleResponse, error) {
	out := new(GetRoutingRuleResponse)
	err := c.cc.Invoke(ctx, RoutingService_GetRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) AddBalancer(ctx context.Context, in *AddBalancingRuleRequest, opts ...grpc.CallOption) (*AddBalancingRuleResponse, error) {
	out := new(AddBalancingRuleResponse)
	err := c.cc.Invoke(ctx, RoutingService_AddBalancer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) AlterBalancer(ctx context.Context, in *AlterBalancingRuleRequest, opts ...grpc.CallOption) (*AlterBalancingRuleResponse, error) {
	out := new(AlterBalancingRuleResponse)
	err := c.cc.Invoke(ctx, RoutingService_AlterBalancer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) RemoveBalancer(ctx context.Context, in *RemoveBalancingRuleRequest, opts ...grpc.CallOption) (*RemoveBalancingRuleResponse, error) {
	out := new(RemoveBalancingRuleResponse)
	err := c.cc.Invoke(ctx, RoutingService_RemoveBalancer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) GetBalancers(ctx context.Context, in *GetBalancerRequest, opts ...grpc.CallOption) (*GetBalancerResponse, error) {
	out := new(GetBalancerResponse)
	err := c.cc.Invoke(ctx, RoutingService_GetBalancers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingServiceServer is the server API for RoutingService service.
// All implementations must embed UnimplementedRoutingServiceServer
// for forward compatibility
type RoutingServiceServer interface {
	SubscribeRoutingStats(*SubscribeRoutingStatsRequest, RoutingService_SubscribeRoutingStatsServer) error
	TestRoute(context.Context, *TestRouteRequest) (*RoutingContext, error)
	// AddRule When adding a routing rule, make sure that the new rule does not conflict with the API route, otherwise the API will not work properly
	AddRule(context.Context, *AddRoutingRuleRequest) (*AddRoutingRuleResponse, error)
	AlterRule(context.Context, *AlterRoutingRuleRequest) (*AlterRoutingRuleResponse, error)
	RemoveRule(context.Context, *RemoveRoutingRuleRequest) (*RemoveRoutingRuleResponse, error)
	// SetRules Routing rules must be set to ensure that the API route must exist, otherwise the API will not work properly
	SetRules(context.Context, *SetRoutingRulesRequest) (*SetRoutingRulesResponse, error)
	GetRules(context.Context, *GetRoutingRulesRequest) (*GetRoutingRulesResponse, error)
	GetRule(context.Context, *GetRoutingRuleRequest) (*GetRoutingRuleResponse, error)
	AddBalancer(context.Context, *AddBalancingRuleRequest) (*AddBalancingRuleResponse, error)
	AlterBalancer(context.Context, *AlterBalancingRuleRequest) (*AlterBalancingRuleResponse, error)
	RemoveBalancer(context.Context, *RemoveBalancingRuleRequest) (*RemoveBalancingRuleResponse, error)
	GetBalancers(context.Context, *GetBalancerRequest) (*GetBalancerResponse, error)
	mustEmbedUnimplementedRoutingServiceServer()
}

// UnimplementedRoutingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoutingServiceServer struct {
}

func (UnimplementedRoutingServiceServer) SubscribeRoutingStats(*SubscribeRoutingStatsRequest, RoutingService_SubscribeRoutingStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRoutingStats not implemented")
}
func (UnimplementedRoutingServiceServer) TestRoute(context.Context, *TestRouteRequest) (*RoutingContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRoute not implemented")
}
func (UnimplementedRoutingServiceServer) AddRule(context.Context, *AddRoutingRuleRequest) (*AddRoutingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRule not implemented")
}
func (UnimplementedRoutingServiceServer) AlterRule(context.Context, *AlterRoutingRuleRequest) (*AlterRoutingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterRule not implemented")
}
func (UnimplementedRoutingServiceServer) RemoveRule(context.Context, *RemoveRoutingRuleRequest) (*RemoveRoutingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRule not implemented")
}
func (UnimplementedRoutingServiceServer) SetRules(context.Context, *SetRoutingRulesRequest) (*SetRoutingRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRules not implemented")
}
func (UnimplementedRoutingServiceServer) GetRules(context.Context, *GetRoutingRulesRequest) (*GetRoutingRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRules not implemented")
}
func (UnimplementedRoutingServiceServer) GetRule(context.Context, *GetRoutingRuleRequest) (*GetRoutingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedRoutingServiceServer) AddBalancer(context.Context, *AddBalancingRuleRequest) (*AddBalancingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBalancer not implemented")
}
func (UnimplementedRoutingServiceServer) AlterBalancer(context.Context, *AlterBalancingRuleRequest) (*AlterBalancingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterBalancer not implemented")
}
func (UnimplementedRoutingServiceServer) RemoveBalancer(context.Context, *RemoveBalancingRuleRequest) (*RemoveBalancingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBalancer not implemented")
}
func (UnimplementedRoutingServiceServer) GetBalancers(context.Context, *GetBalancerRequest) (*GetBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalancers not implemented")
}
func (UnimplementedRoutingServiceServer) mustEmbedUnimplementedRoutingServiceServer() {}

// UnsafeRoutingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingServiceServer will
// result in compilation errors.
type UnsafeRoutingServiceServer interface {
	mustEmbedUnimplementedRoutingServiceServer()
}

func RegisterRoutingServiceServer(s grpc.ServiceRegistrar, srv RoutingServiceServer) {
	s.RegisterService(&RoutingService_ServiceDesc, srv)
}

func _RoutingService_SubscribeRoutingStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRoutingStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutingServiceServer).SubscribeRoutingStats(m, &routingServiceSubscribeRoutingStatsServer{stream})
}

type RoutingService_SubscribeRoutingStatsServer interface {
	Send(*RoutingContext) error
	grpc.ServerStream
}

type routingServiceSubscribeRoutingStatsServer struct {
	grpc.ServerStream
}

func (x *routingServiceSubscribeRoutingStatsServer) Send(m *RoutingContext) error {
	return x.ServerStream.SendMsg(m)
}

func _RoutingService_TestRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).TestRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_TestRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).TestRoute(ctx, req.(*TestRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_AddRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).AddRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_AddRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).AddRule(ctx, req.(*AddRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_AlterRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).AlterRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_AlterRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).AlterRule(ctx, req.(*AlterRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_RemoveRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).RemoveRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_RemoveRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).RemoveRule(ctx, req.(*RemoveRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_SetRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoutingRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).SetRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_SetRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).SetRules(ctx, req.(*SetRoutingRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_GetRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).GetRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_GetRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).GetRules(ctx, req.(*GetRoutingRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_GetRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).GetRule(ctx, req.(*GetRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_AddBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBalancingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).AddBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_AddBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).AddBalancer(ctx, req.(*AddBalancingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_AlterBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterBalancingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).AlterBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_AlterBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).AlterBalancer(ctx, req.(*AlterBalancingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_RemoveBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBalancingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).RemoveBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_RemoveBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).RemoveBalancer(ctx, req.(*RemoveBalancingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_GetBalancers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).GetBalancers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_GetBalancers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).GetBalancers(ctx, req.(*GetBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingService_ServiceDesc is the grpc.ServiceDesc for RoutingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xray.app.router.command.RoutingService",
	HandlerType: (*RoutingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestRoute",
			Handler:    _RoutingService_TestRoute_Handler,
		},
		{
			MethodName: "AddRule",
			Handler:    _RoutingService_AddRule_Handler,
		},
		{
			MethodName: "AlterRule",
			Handler:    _RoutingService_AlterRule_Handler,
		},
		{
			MethodName: "RemoveRule",
			Handler:    _RoutingService_RemoveRule_Handler,
		},
		{
			MethodName: "SetRules",
			Handler:    _RoutingService_SetRules_Handler,
		},
		{
			MethodName: "GetRules",
			Handler:    _RoutingService_GetRules_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _RoutingService_GetRule_Handler,
		},
		{
			MethodName: "AddBalancer",
			Handler:    _RoutingService_AddBalancer_Handler,
		},
		{
			MethodName: "AlterBalancer",
			Handler:    _RoutingService_AlterBalancer_Handler,
		},
		{
			MethodName: "RemoveBalancer",
			Handler:    _RoutingService_RemoveBalancer_Handler,
		},
		{
			MethodName: "GetBalancers",
			Handler:    _RoutingService_GetBalancers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeRoutingStats",
			Handler:       _RoutingService_SubscribeRoutingStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/router/command/command.proto",
}
