// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoutingServiceClient is the client API for RoutingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoutingServiceClient interface {
	SubscribeRoutingStats(ctx context.Context, in *SubscribeRoutingStatsRequest, opts ...grpc.CallOption) (RoutingService_SubscribeRoutingStatsClient, error)
	TestRoute(ctx context.Context, in *TestRouteRequest, opts ...grpc.CallOption) (*RoutingContext, error)
	AddRoutingRule(ctx context.Context, in *AddRoutingRuleRequest, opts ...grpc.CallOption) (*AddRoutingRuleResponse, error)
	AlterRoutingRule(ctx context.Context, in *AlterRoutingRuleRequest, opts ...grpc.CallOption) (*AlterRoutingRuleResponse, error)
	RemoveRoutingRule(ctx context.Context, in *RemoveRoutingRuleRequest, opts ...grpc.CallOption) (*RemoveRoutingRuleResponse, error)
	AddBalancingRule(ctx context.Context, in *AddBalancingRuleRequest, opts ...grpc.CallOption) (*AddBalancingRuleResponse, error)
	AlterBalancingRule(ctx context.Context, in *AlterBalancingRuleRequest, opts ...grpc.CallOption) (*AlterBalancingRuleResponse, error)
	RemoveBalancingRule(ctx context.Context, in *RemoveBalancingRuleRequest, opts ...grpc.CallOption) (*RemoveBalancingRuleResponse, error)
}

type routingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingServiceClient(cc grpc.ClientConnInterface) RoutingServiceClient {
	return &routingServiceClient{cc}
}

func (c *routingServiceClient) SubscribeRoutingStats(ctx context.Context, in *SubscribeRoutingStatsRequest, opts ...grpc.CallOption) (RoutingService_SubscribeRoutingStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoutingService_ServiceDesc.Streams[0], "/xray.app.router.command.RoutingService/SubscribeRoutingStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingServiceSubscribeRoutingStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoutingService_SubscribeRoutingStatsClient interface {
	Recv() (*RoutingContext, error)
	grpc.ClientStream
}

type routingServiceSubscribeRoutingStatsClient struct {
	grpc.ClientStream
}

func (x *routingServiceSubscribeRoutingStatsClient) Recv() (*RoutingContext, error) {
	m := new(RoutingContext)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingServiceClient) TestRoute(ctx context.Context, in *TestRouteRequest, opts ...grpc.CallOption) (*RoutingContext, error) {
	out := new(RoutingContext)
	err := c.cc.Invoke(ctx, "/xray.app.router.command.RoutingService/TestRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) AddRoutingRule(ctx context.Context, in *AddRoutingRuleRequest, opts ...grpc.CallOption) (*AddRoutingRuleResponse, error) {
	out := new(AddRoutingRuleResponse)
	err := c.cc.Invoke(ctx, "/xray.app.router.command.RoutingService/AddRoutingRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) AlterRoutingRule(ctx context.Context, in *AlterRoutingRuleRequest, opts ...grpc.CallOption) (*AlterRoutingRuleResponse, error) {
	out := new(AlterRoutingRuleResponse)
	err := c.cc.Invoke(ctx, "/xray.app.router.command.RoutingService/AlterRoutingRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) RemoveRoutingRule(ctx context.Context, in *RemoveRoutingRuleRequest, opts ...grpc.CallOption) (*RemoveRoutingRuleResponse, error) {
	out := new(RemoveRoutingRuleResponse)
	err := c.cc.Invoke(ctx, "/xray.app.router.command.RoutingService/RemoveRoutingRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) AddBalancingRule(ctx context.Context, in *AddBalancingRuleRequest, opts ...grpc.CallOption) (*AddBalancingRuleResponse, error) {
	out := new(AddBalancingRuleResponse)
	err := c.cc.Invoke(ctx, "/xray.app.router.command.RoutingService/AddBalancingRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) AlterBalancingRule(ctx context.Context, in *AlterBalancingRuleRequest, opts ...grpc.CallOption) (*AlterBalancingRuleResponse, error) {
	out := new(AlterBalancingRuleResponse)
	err := c.cc.Invoke(ctx, "/xray.app.router.command.RoutingService/AlterBalancingRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) RemoveBalancingRule(ctx context.Context, in *RemoveBalancingRuleRequest, opts ...grpc.CallOption) (*RemoveBalancingRuleResponse, error) {
	out := new(RemoveBalancingRuleResponse)
	err := c.cc.Invoke(ctx, "/xray.app.router.command.RoutingService/RemoveBalancingRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingServiceServer is the server API for RoutingService service.
type RoutingServiceServer interface {
	SubscribeRoutingStats(*SubscribeRoutingStatsRequest, RoutingService_SubscribeRoutingStatsServer) error
	TestRoute(context.Context, *TestRouteRequest) (*RoutingContext, error)
	AddRoutingRule(context.Context, *AddRoutingRuleRequest) (*AddRoutingRuleResponse, error)
	AlterRoutingRule(context.Context, *AlterRoutingRuleRequest) (*AlterRoutingRuleResponse, error)
	RemoveRoutingRule(context.Context, *RemoveRoutingRuleRequest) (*RemoveRoutingRuleResponse, error)
	AddBalancingRule(context.Context, *AddBalancingRuleRequest) (*AddBalancingRuleResponse, error)
	AlterBalancingRule(context.Context, *AlterBalancingRuleRequest) (*AlterBalancingRuleResponse, error)
	RemoveBalancingRule(context.Context, *RemoveBalancingRuleRequest) (*RemoveBalancingRuleResponse, error)
}

// UnimplementedRoutingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRoutingServiceServer struct {
}

func (*UnimplementedRoutingServiceServer) SubscribeRoutingStats(*SubscribeRoutingStatsRequest, RoutingService_SubscribeRoutingStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRoutingStats not implemented")
}
func (*UnimplementedRoutingServiceServer) TestRoute(context.Context, *TestRouteRequest) (*RoutingContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRoute not implemented")
}
func (*UnimplementedRoutingServiceServer) AddRoutingRule(context.Context, *AddRoutingRuleRequest) (*AddRoutingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoutingRule not implemented")
}
func (*UnimplementedRoutingServiceServer) AlterRoutingRule(context.Context, *AlterRoutingRuleRequest) (*AlterRoutingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterRoutingRule not implemented")
}
func (*UnimplementedRoutingServiceServer) RemoveRoutingRule(context.Context, *RemoveRoutingRuleRequest) (*RemoveRoutingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoutingRule not implemented")
}
func (*UnimplementedRoutingServiceServer) AddBalancingRule(context.Context, *AddBalancingRuleRequest) (*AddBalancingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBalancingRule not implemented")
}
func (*UnimplementedRoutingServiceServer) AlterBalancingRule(context.Context, *AlterBalancingRuleRequest) (*AlterBalancingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterBalancingRule not implemented")
}
func (*UnimplementedRoutingServiceServer) RemoveBalancingRule(context.Context, *RemoveBalancingRuleRequest) (*RemoveBalancingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBalancingRule not implemented")
}

func RegisterRoutingServiceServer(s *grpc.Server, srv RoutingServiceServer) {
	s.RegisterService(&RoutingService_ServiceDesc, srv)
}

func _RoutingService_SubscribeRoutingStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRoutingStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutingServiceServer).SubscribeRoutingStats(m, &routingServiceSubscribeRoutingStatsServer{stream})
}

type RoutingService_SubscribeRoutingStatsServer interface {
	Send(*RoutingContext) error
	grpc.ServerStream
}

type routingServiceSubscribeRoutingStatsServer struct {
	grpc.ServerStream
}

func (x *routingServiceSubscribeRoutingStatsServer) Send(m *RoutingContext) error {
	return x.ServerStream.SendMsg(m)
}

func _RoutingService_TestRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).TestRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xray.app.router.command.RoutingService/TestRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).TestRoute(ctx, req.(*TestRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_AddRoutingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).AddRoutingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xray.app.router.command.RoutingService/AddRoutingRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).AddRoutingRule(ctx, req.(*AddRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_AlterRoutingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).AlterRoutingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xray.app.router.command.RoutingService/AlterRoutingRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).AlterRoutingRule(ctx, req.(*AlterRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_RemoveRoutingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).RemoveRoutingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xray.app.router.command.RoutingService/RemoveRoutingRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).RemoveRoutingRule(ctx, req.(*RemoveRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_AddBalancingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBalancingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).AddBalancingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xray.app.router.command.RoutingService/AddBalancingRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).AddBalancingRule(ctx, req.(*AddBalancingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_AlterBalancingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterBalancingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).AlterBalancingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xray.app.router.command.RoutingService/AlterBalancingRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).AlterBalancingRule(ctx, req.(*AlterBalancingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_RemoveBalancingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBalancingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).RemoveBalancingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xray.app.router.command.RoutingService/RemoveBalancingRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).RemoveBalancingRule(ctx, req.(*RemoveBalancingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var RoutingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xray.app.router.command.RoutingService",
	HandlerType: (*RoutingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestRoute",
			Handler:    _RoutingService_TestRoute_Handler,
		},
		{
			MethodName: "AddRoutingRule",
			Handler:    _RoutingService_AddRoutingRule_Handler,
		},
		{
			MethodName: "AlterRoutingRule",
			Handler:    _RoutingService_AlterRoutingRule_Handler,
		},
		{
			MethodName: "RemoveRoutingRule",
			Handler:    _RoutingService_RemoveRoutingRule_Handler,
		},
		{
			MethodName: "AddBalancingRule",
			Handler:    _RoutingService_AddBalancingRule_Handler,
		},
		{
			MethodName: "AlterBalancingRule",
			Handler:    _RoutingService_AlterBalancingRule_Handler,
		},
		{
			MethodName: "RemoveBalancingRule",
			Handler:    _RoutingService_RemoveBalancingRule_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeRoutingStats",
			Handler:       _RoutingService_SubscribeRoutingStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/router/command/command.proto",
}
